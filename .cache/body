{"data_input":false,"question_id":"1046","lang":"cpp","typed_code":"\n#pragma GCC optimize(\"O3,unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\n\nstatic const bool Booster = []() {\n  std::ios_base::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  std::cout.tie(nullptr);\n  return true;\n}();\n\ninline bool isdigit(char c) { return c >= '0' && c <= '9'; }\n\nvoid parse_input_and_solve(std::ofstream &out, std::string &s, std::string &t) {\n  int n = s.size() - 1;\n  int k = stoi(t);\n  int flip = 0, l = 1, r = 1, len = 0;\n  while (r < n) {\n    if (s[r] == 48)\n      flip++;\n    if (flip > k) {\n      if (s[l] == 48)\n        flip--;\n      l += 2;\n    }\n    len = max(len, r / 2 - l / 2 + 1);\n    r += 2;\n  }\n  out << len << endl;\n}\n\nbool Solve = []() {\n  std::ofstream out(\"user.out\");\n  std::string s, t;\n  while (std::getline(std::cin, s) && std::getline(std::cin, t)) {\n    parse_input_and_solve(out, s, t);\n  }\n  out.flush();\n  exit(0);\n  return true;\n}();\n\nclass Solution {\npublic:\n  int longestOnes(vector<int> &nums, int k) {\n    int ans = 0;\n    int count = 0;\n    int left = 0;\n\n    for (int right = 0; right < nums.size(); right++) {\n      if (nums[right] == 0) {\n        count++;\n      }\n      if (count <= k) {\n        int length = right - left + 1;\n        ans = max(ans, length);\n      }\n      while (count > k && left < right) {\n        if (nums[left] == 0) {\n          count--;\n        }\n        left++;\n      }\n    }\n\n    return ans;\n  }\n};"}